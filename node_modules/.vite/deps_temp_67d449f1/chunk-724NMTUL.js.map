{
  "version": 3,
  "sources": ["../../viem/utils/data/isHex.ts", "../../viem/utils/lru.ts", "../../viem/errors/version.ts", "../../viem/errors/base.ts", "../../viem/errors/address.ts", "../../viem/errors/data.ts", "../../viem/utils/data/pad.ts", "../../viem/errors/encoding.ts", "../../viem/utils/data/size.ts", "../../viem/utils/data/trim.ts", "../../viem/utils/encoding/fromHex.ts", "../../viem/utils/encoding/toHex.ts", "../../viem/utils/encoding/toBytes.ts", "../../viem/node_modules/@noble/hashes/src/sha3.ts", "../../viem/utils/hash/keccak256.ts", "../../viem/utils/address/getAddress.ts", "../../viem/utils/address/isAddress.ts", "../../viem/utils/data/concat.ts", "../../viem/utils/abi/formatAbiItem.ts", "../../viem/errors/abi.ts", "../../viem/utils/data/slice.ts", "../../viem/utils/regex.ts", "../../viem/utils/abi/encodeAbiParameters.ts", "../../viem/constants/solidity.ts", "../../viem/utils/hash/hashSignature.ts", "../../abitype/src/version.ts", "../../abitype/src/errors.ts", "../../abitype/src/regex.ts", "../../abitype/src/human-readable/formatAbiParameter.ts", "../../abitype/src/human-readable/formatAbiParameters.ts", "../../abitype/src/human-readable/formatAbiItem.ts", "../../abitype/src/human-readable/runtime/signatures.ts", "../../abitype/src/human-readable/errors/abiItem.ts", "../../abitype/src/human-readable/errors/abiParameter.ts", "../../abitype/src/human-readable/errors/signature.ts", "../../abitype/src/human-readable/errors/struct.ts", "../../abitype/src/human-readable/errors/splitParameters.ts", "../../abitype/src/human-readable/runtime/cache.ts", "../../abitype/src/human-readable/runtime/utils.ts", "../../abitype/src/human-readable/runtime/structs.ts", "../../abitype/src/human-readable/parseAbi.ts", "../../abitype/src/human-readable/parseAbiItem.ts", "../../abitype/src/human-readable/parseAbiParameters.ts", "../../viem/utils/hash/normalizeSignature.ts", "../../viem/utils/hash/toSignature.ts", "../../viem/utils/hash/toSignatureHash.ts", "../../viem/utils/hash/toFunctionSelector.ts", "../../viem/errors/cursor.ts", "../../viem/utils/cursor.ts", "../../viem/utils/encoding/fromBytes.ts", "../../viem/utils/abi/decodeAbiParameters.ts", "../../viem/utils/abi/decodeErrorResult.ts", "../../viem/utils/stringify.ts", "../../viem/errors/utils.ts", "../../viem/errors/request.ts", "../../viem/errors/rpc.ts", "../../viem/utils/hash/toEventSelector.ts", "../../viem/utils/abi/getAbiItem.ts", "../../viem/errors/chain.ts", "../../viem/utils/chain/getChainContractAddress.ts", "../../viem/accounts/utils/parseAccount.ts", "../../viem/constants/unit.ts", "../../viem/utils/unit/formatUnits.ts", "../../viem/utils/unit/formatEther.ts", "../../viem/utils/unit/formatGwei.ts", "../../viem/errors/stateOverride.ts", "../../viem/errors/transaction.ts", "../../viem/utils/abi/formatAbiItemWithArgs.ts", "../../viem/errors/contract.ts", "../../viem/errors/node.ts", "../../viem/utils/errors/getNodeError.ts", "../../viem/utils/errors/getCallError.ts", "../../viem/utils/formatters/extract.ts", "../../viem/utils/formatters/formatter.ts", "../../viem/utils/formatters/transactionRequest.ts", "../../viem/constants/number.ts", "../../viem/utils/transaction/assertRequest.ts"],
  "sourcesContent": ["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean | undefined } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n", "/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override get(key: string) {\n    const value = super.get(key)\n\n    if (super.has(key) && value !== undefined) {\n      this.delete(key)\n  